// Generated by jextract

package org.hivevm.webview.ffi;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

/**
 * {@snippet lang = c :
 * struct {
 *     webview_version_t version;
 *     char version_number[32];
 *     char pre_release[48];
 *     char build_metadata[48];
 * }
 * }
 */
public class webview_version_info_t {

  webview_version_info_t() {
    // Should not be called directly
  }

  private static final GroupLayout $LAYOUT = MemoryLayout
      .structLayout(webview_version_t.layout().withName("version"),
          MemoryLayout.sequenceLayout(32, webview_h.C_CHAR).withName("version_number"),
          MemoryLayout.sequenceLayout(48, webview_h.C_CHAR).withName("pre_release"),
          MemoryLayout.sequenceLayout(48, webview_h.C_CHAR).withName("build_metadata"))
      .withName("$anon$40:9");

  /**
   * The layout of this struct
   */
  public static final GroupLayout layout() {
    return $LAYOUT;
  }

  private static final GroupLayout version$LAYOUT =
      (GroupLayout) $LAYOUT.select(groupElement("version"));

  /**
   * Layout for field:
   * {@snippet lang = c : * webview_version_t version
   * }
   */
  public static final GroupLayout version$layout() {
    return version$LAYOUT;
  }

  private static final long version$OFFSET = 0;

  /**
   * Offset for field:
   * {@snippet lang = c : * webview_version_t version
   * }
   */
  public static final long version$offset() {
    return version$OFFSET;
  }

  /**
   * Getter for field:
   * {@snippet lang = c : * webview_version_t version
   * }
   */
  public static MemorySegment version(MemorySegment struct) {
    return struct.asSlice(version$OFFSET, version$LAYOUT.byteSize());
  }

  /**
   * Setter for field:
   * {@snippet lang = c : * webview_version_t version
   * }
   */
  public static void version(MemorySegment struct, MemorySegment fieldValue) {
    MemorySegment.copy(fieldValue, 0L, struct, version$OFFSET, version$LAYOUT.byteSize());
  }

  private static final SequenceLayout version_number$LAYOUT =
      (SequenceLayout) $LAYOUT.select(groupElement("version_number"));

  /**
   * Layout for field:
   * {@snippet lang = c : * char version_number[32]
   * }
   */
  public static final SequenceLayout version_number$layout() {
    return version_number$LAYOUT;
  }

  private static final long version_number$OFFSET = 12;

  /**
   * Offset for field:
   * {@snippet lang = c : * char version_number[32]
   * }
   */
  public static final long version_number$offset() {
    return version_number$OFFSET;
  }

  /**
   * Getter for field:
   * {@snippet lang = c : * char version_number[32]
   * }
   */
  public static MemorySegment version_number(MemorySegment struct) {
    return struct.asSlice(version_number$OFFSET, version_number$LAYOUT.byteSize());
  }

  /**
   * Setter for field:
   * {@snippet lang = c : * char version_number[32]
   * }
   */
  public static void version_number(MemorySegment struct, MemorySegment fieldValue) {
    MemorySegment.copy(fieldValue, 0L, struct, version_number$OFFSET,
        version_number$LAYOUT.byteSize());
  }

  private static long[] version_number$DIMS = {32};

  /**
   * Dimensions for array field:
   * {@snippet lang = c : * char version_number[32]
   * }
   */
  public static long[] version_number$dimensions() {
    return version_number$DIMS;
  }

  private static final VarHandle version_number$ELEM_HANDLE =
      version_number$LAYOUT.varHandle(sequenceElement());

  /**
   * Indexed getter for field:
   * {@snippet lang = c : * char version_number[32]
   * }
   */
  public static byte version_number(MemorySegment struct, long index0) {
    return (byte) version_number$ELEM_HANDLE.get(struct, 0L, index0);
  }

  /**
   * Indexed setter for field:
   * {@snippet lang = c : * char version_number[32]
   * }
   */
  public static void version_number(MemorySegment struct, long index0, byte fieldValue) {
    version_number$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
  }

  private static final SequenceLayout pre_release$LAYOUT =
      (SequenceLayout) $LAYOUT.select(groupElement("pre_release"));

  /**
   * Layout for field:
   * {@snippet lang = c : * char pre_release[48]
   * }
   */
  public static final SequenceLayout pre_release$layout() {
    return pre_release$LAYOUT;
  }

  private static final long pre_release$OFFSET = 44;

  /**
   * Offset for field:
   * {@snippet lang = c : * char pre_release[48]
   * }
   */
  public static final long pre_release$offset() {
    return pre_release$OFFSET;
  }

  /**
   * Getter for field:
   * {@snippet lang = c : * char pre_release[48]
   * }
   */
  public static MemorySegment pre_release(MemorySegment struct) {
    return struct.asSlice(pre_release$OFFSET, pre_release$LAYOUT.byteSize());
  }

  /**
   * Setter for field:
   * {@snippet lang = c : * char pre_release[48]
   * }
   */
  public static void pre_release(MemorySegment struct, MemorySegment fieldValue) {
    MemorySegment.copy(fieldValue, 0L, struct, pre_release$OFFSET, pre_release$LAYOUT.byteSize());
  }

  private static long[] pre_release$DIMS = {48};

  /**
   * Dimensions for array field:
   * {@snippet lang = c : * char pre_release[48]
   * }
   */
  public static long[] pre_release$dimensions() {
    return pre_release$DIMS;
  }

  private static final VarHandle pre_release$ELEM_HANDLE =
      pre_release$LAYOUT.varHandle(sequenceElement());

  /**
   * Indexed getter for field:
   * {@snippet lang = c : * char pre_release[48]
   * }
   */
  public static byte pre_release(MemorySegment struct, long index0) {
    return (byte) pre_release$ELEM_HANDLE.get(struct, 0L, index0);
  }

  /**
   * Indexed setter for field:
   * {@snippet lang = c : * char pre_release[48]
   * }
   */
  public static void pre_release(MemorySegment struct, long index0, byte fieldValue) {
    pre_release$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
  }

  private static final SequenceLayout build_metadata$LAYOUT =
      (SequenceLayout) $LAYOUT.select(groupElement("build_metadata"));

  /**
   * Layout for field:
   * {@snippet lang = c : * char build_metadata[48]
   * }
   */
  public static final SequenceLayout build_metadata$layout() {
    return build_metadata$LAYOUT;
  }

  private static final long build_metadata$OFFSET = 92;

  /**
   * Offset for field:
   * {@snippet lang = c : * char build_metadata[48]
   * }
   */
  public static final long build_metadata$offset() {
    return build_metadata$OFFSET;
  }

  /**
   * Getter for field:
   * {@snippet lang = c : * char build_metadata[48]
   * }
   */
  public static MemorySegment build_metadata(MemorySegment struct) {
    return struct.asSlice(build_metadata$OFFSET, build_metadata$LAYOUT.byteSize());
  }

  /**
   * Setter for field:
   * {@snippet lang = c : * char build_metadata[48]
   * }
   */
  public static void build_metadata(MemorySegment struct, MemorySegment fieldValue) {
    MemorySegment.copy(fieldValue, 0L, struct, build_metadata$OFFSET,
        build_metadata$LAYOUT.byteSize());
  }

  private static long[] build_metadata$DIMS = {48};

  /**
   * Dimensions for array field:
   * {@snippet lang = c : * char build_metadata[48]
   * }
   */
  public static long[] build_metadata$dimensions() {
    return build_metadata$DIMS;
  }

  private static final VarHandle build_metadata$ELEM_HANDLE =
      build_metadata$LAYOUT.varHandle(sequenceElement());

  /**
   * Indexed getter for field:
   * {@snippet lang = c : * char build_metadata[48]
   * }
   */
  public static byte build_metadata(MemorySegment struct, long index0) {
    return (byte) build_metadata$ELEM_HANDLE.get(struct, 0L, index0);
  }

  /**
   * Indexed setter for field:
   * {@snippet lang = c : * char build_metadata[48]
   * }
   */
  public static void build_metadata(MemorySegment struct, long index0, byte fieldValue) {
    build_metadata$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
  }

  /**
   * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}. The
   * returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
   */
  public static MemorySegment asSlice(MemorySegment array, long index) {
    return array.asSlice(layout().byteSize() * index);
  }

  /**
   * The size (in bytes) of this struct
   */
  public static long sizeof() {
    return layout().byteSize();
  }

  /**
   * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
   */
  public static MemorySegment allocate(SegmentAllocator allocator) {
    return allocator.allocate(layout());
  }

  /**
   * Allocate an array of size {@code elementCount} using {@code allocator}. The returned segment
   * has size {@code elementCount * layout().byteSize()}.
   */
  public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
  }

  /**
   * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any). The
   * returned segment has size {@code layout().byteSize()}
   */
  public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
      Consumer<MemorySegment> cleanup) {
    return reinterpret(addr, 1, arena, cleanup);
  }

  /**
   * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any). The
   * returned segment has size {@code elementCount * layout().byteSize()}
   */
  public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
      Consumer<MemorySegment> cleanup) {
    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
  }
}

