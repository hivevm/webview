// Generated by jextract

package org.hivevm.webview.ffi;

import static java.lang.foreign.ValueLayout.JAVA_BYTE;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.PaddingLayout;
import java.lang.foreign.SequenceLayout;
import java.lang.foreign.StructLayout;
import java.lang.foreign.SymbolLookup;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

public class webview_h {

  webview_h() {
    // Should not be called directly
  }

  static final Arena   LIBRARY_ARENA   = Arena.ofAuto();
  static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

  static void traceDowncall(String name, Object... args) {
    String traceArgs = Arrays.stream(args).map(Object::toString).collect(Collectors.joining(", "));
    System.out.printf("%s(%s)\n", name, traceArgs);
  }

  static MemorySegment findOrThrow(String symbol) {
    return SYMBOL_LOOKUP.find(symbol)
        .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
  }

  static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
    try {
      return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
    } catch (ReflectiveOperationException ex) {
      throw new AssertionError(ex);
    }
  }

  static MemoryLayout align(MemoryLayout layout, long align) {
    return switch (layout) {
      case PaddingLayout p -> p;
      case ValueLayout v -> v.withByteAlignment(align);
      case GroupLayout g -> {
        MemoryLayout[] alignedMembers =
            g.memberLayouts().stream().map(m -> align(m, align)).toArray(MemoryLayout[]::new);
        yield g instanceof StructLayout ? MemoryLayout.structLayout(alignedMembers)
            : MemoryLayout.unionLayout(alignedMembers);
      }
      case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(),
          align(s.elementLayout(), align));
    };
  }

  static final SymbolLookup                 SYMBOL_LOOKUP                    =
      SymbolLookup.libraryLookup(System.mapLibraryName("webview"), LIBRARY_ARENA)
          .or(SymbolLookup.loaderLookup()).or(Linker.nativeLinker().defaultLookup());

  public static final ValueLayout.OfBoolean C_BOOL                           =
      ValueLayout.JAVA_BOOLEAN;
  public static final ValueLayout.OfByte    C_CHAR                           =
      ValueLayout.JAVA_BYTE;
  public static final ValueLayout.OfShort   C_SHORT                          =
      ValueLayout.JAVA_SHORT;
  public static final ValueLayout.OfInt     C_INT                            = ValueLayout.JAVA_INT;
  public static final ValueLayout.OfLong    C_LONG_LONG                      =
      ValueLayout.JAVA_LONG;
  public static final ValueLayout.OfFloat   C_FLOAT                          =
      ValueLayout.JAVA_FLOAT;
  public static final ValueLayout.OfDouble  C_DOUBLE                         =
      ValueLayout.JAVA_DOUBLE;
  public static final AddressLayout         C_POINTER                        = ValueLayout.ADDRESS
      .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
  public static final ValueLayout.OfLong    C_LONG                           =
      ValueLayout.JAVA_LONG;
  private static final int                  WEBVIEW_ERROR_MISSING_DEPENDENCY = (int) -5L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_MISSING_DEPENDENCY = -5
   * }
   */
  public static int WEBVIEW_ERROR_MISSING_DEPENDENCY() {
    return WEBVIEW_ERROR_MISSING_DEPENDENCY;
  }

  private static final int WEBVIEW_ERROR_CANCELED = (int) -4L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_CANCELED = -4
   * }
   */
  public static int WEBVIEW_ERROR_CANCELED() {
    return WEBVIEW_ERROR_CANCELED;
  }

  private static final int WEBVIEW_ERROR_INVALID_STATE = (int) -3L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_INVALID_STATE = -3
   * }
   */
  public static int WEBVIEW_ERROR_INVALID_STATE() {
    return WEBVIEW_ERROR_INVALID_STATE;
  }

  private static final int WEBVIEW_ERROR_INVALID_ARGUMENT = (int) -2L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_INVALID_ARGUMENT = -2
   * }
   */
  public static int WEBVIEW_ERROR_INVALID_ARGUMENT() {
    return WEBVIEW_ERROR_INVALID_ARGUMENT;
  }

  private static final int WEBVIEW_ERROR_UNSPECIFIED = (int) -1L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_UNSPECIFIED = -1
   * }
   */
  public static int WEBVIEW_ERROR_UNSPECIFIED() {
    return WEBVIEW_ERROR_UNSPECIFIED;
  }

  private static final int WEBVIEW_ERROR_OK = (int) 0L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_OK = 0
   * }
   */
  public static int WEBVIEW_ERROR_OK() {
    return WEBVIEW_ERROR_OK;
  }

  private static final int WEBVIEW_ERROR_DUPLICATE = (int) 1L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_DUPLICATE = 1
   * }
   */
  public static int WEBVIEW_ERROR_DUPLICATE() {
    return WEBVIEW_ERROR_DUPLICATE;
  }

  private static final int WEBVIEW_ERROR_NOT_FOUND = (int) 2L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_ERROR_NOT_FOUND = 2
   * }
   */
  public static int WEBVIEW_ERROR_NOT_FOUND() {
    return WEBVIEW_ERROR_NOT_FOUND;
  }

  /**
   * {@snippet lang = c : * typedef void *webview_t
   * }
   */
  public static final AddressLayout webview_t                            = webview_h.C_POINTER;
  private static final int          WEBVIEW_NATIVE_HANDLE_KIND_UI_WINDOW = (int) 0L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_NATIVE_HANDLE_KIND_UI_WINDOW = 0
   * }
   */
  public static int WEBVIEW_NATIVE_HANDLE_KIND_UI_WINDOW() {
    return WEBVIEW_NATIVE_HANDLE_KIND_UI_WINDOW;
  }

  private static final int WEBVIEW_NATIVE_HANDLE_KIND_UI_WIDGET = (int) 1L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_NATIVE_HANDLE_KIND_UI_WIDGET = 1
   * }
   */
  public static int WEBVIEW_NATIVE_HANDLE_KIND_UI_WIDGET() {
    return WEBVIEW_NATIVE_HANDLE_KIND_UI_WIDGET;
  }

  private static final int WEBVIEW_NATIVE_HANDLE_KIND_BROWSER_CONTROLLER = (int) 2L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_NATIVE_HANDLE_KIND_BROWSER_CONTROLLER = 2
   * }
   */
  public static int WEBVIEW_NATIVE_HANDLE_KIND_BROWSER_CONTROLLER() {
    return WEBVIEW_NATIVE_HANDLE_KIND_BROWSER_CONTROLLER;
  }

  private static final int WEBVIEW_HINT_NONE = (int) 0L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_HINT_NONE = 0
   * }
   */
  public static int WEBVIEW_HINT_NONE() {
    return WEBVIEW_HINT_NONE;
  }

  private static final int WEBVIEW_HINT_MIN = (int) 1L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_HINT_MIN = 1
   * }
   */
  public static int WEBVIEW_HINT_MIN() {
    return WEBVIEW_HINT_MIN;
  }

  private static final int WEBVIEW_HINT_MAX = (int) 2L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_HINT_MAX = 2
   * }
   */
  public static int WEBVIEW_HINT_MAX() {
    return WEBVIEW_HINT_MAX;
  }

  private static final int WEBVIEW_HINT_FIXED = (int) 3L;

  /**
   * {@snippet lang = c : * enum <anonymous>.WEBVIEW_HINT_FIXED = 3
   * }
   */
  public static int WEBVIEW_HINT_FIXED() {
    return WEBVIEW_HINT_FIXED;
  }

  private static class webview_create {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_POINTER, webview_h.C_INT, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_create");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_t webview_create(int debug, void *window)
   * }
   */
  public static FunctionDescriptor webview_create$descriptor() {
    return webview_create.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_t webview_create(int debug, void *window)
   * }
   */
  public static MethodHandle webview_create$handle() {
    return webview_create.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_t webview_create(int debug, void *window)
   * }
   */
  public static MemorySegment webview_create$address() {
    return webview_create.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_t webview_create(int debug, void *window)
   * }
   */
  public static MemorySegment webview_create(int debug, MemorySegment window) {
    var mh$ = webview_create.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_create", debug, window);
      }
      return (MemorySegment) mh$.invokeExact(debug, window);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_destroy {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_destroy");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_destroy(webview_t w)
   * }
   */
  public static FunctionDescriptor webview_destroy$descriptor() {
    return webview_destroy.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_destroy(webview_t w)
   * }
   */
  public static MethodHandle webview_destroy$handle() {
    return webview_destroy.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_destroy(webview_t w)
   * }
   */
  public static MemorySegment webview_destroy$address() {
    return webview_destroy.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_destroy(webview_t w)
   * }
   */
  public static int webview_destroy(MemorySegment w) {
    var mh$ = webview_destroy.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_destroy", w);
      }
      return (int) mh$.invokeExact(w);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_run {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_run");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_run(webview_t w)
   * }
   */
  public static FunctionDescriptor webview_run$descriptor() {
    return webview_run.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_run(webview_t w)
   * }
   */
  public static MethodHandle webview_run$handle() {
    return webview_run.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_run(webview_t w)
   * }
   */
  public static MemorySegment webview_run$address() {
    return webview_run.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_run(webview_t w)
   * }
   */
  public static int webview_run(MemorySegment w) {
    var mh$ = webview_run.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_run", w);
      }
      return (int) mh$.invokeExact(w);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_terminate {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_terminate");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_terminate(webview_t w)
   * }
   */
  public static FunctionDescriptor webview_terminate$descriptor() {
    return webview_terminate.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_terminate(webview_t w)
   * }
   */
  public static MethodHandle webview_terminate$handle() {
    return webview_terminate.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_terminate(webview_t w)
   * }
   */
  public static MemorySegment webview_terminate$address() {
    return webview_terminate.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_terminate(webview_t w)
   * }
   */
  public static int webview_terminate(MemorySegment w) {
    var mh$ = webview_terminate.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_terminate", w);
      }
      return (int) mh$.invokeExact(w);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_dispatch {
    public static final FunctionDescriptor DESC   = FunctionDescriptor.of(webview_h.C_INT,
        webview_h.C_POINTER, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_dispatch");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_dispatch(webview_t w, void (*fn)(webview_t, void *), void *arg)
   * }
   */
  public static FunctionDescriptor webview_dispatch$descriptor() {
    return webview_dispatch.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_dispatch(webview_t w, void (*fn)(webview_t, void *), void *arg)
   * }
   */
  public static MethodHandle webview_dispatch$handle() {
    return webview_dispatch.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_dispatch(webview_t w, void (*fn)(webview_t, void *), void *arg)
   * }
   */
  public static MemorySegment webview_dispatch$address() {
    return webview_dispatch.ADDR;
  }

  /**
   * {@snippet lang = c
   * : * extern webview_error_t webview_dispatch(webview_t w, void (*fn)(webview_t, void *), void *arg)
   * }
   */
  public static int webview_dispatch(MemorySegment w, MemorySegment fn, MemorySegment arg) {
    var mh$ = webview_dispatch.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_dispatch", w, fn, arg);
      }
      return (int) mh$.invokeExact(w, fn, arg);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_get_window {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_get_window");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern void *webview_get_window(webview_t w)
   * }
   */
  public static FunctionDescriptor webview_get_window$descriptor() {
    return webview_get_window.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern void *webview_get_window(webview_t w)
   * }
   */
  public static MethodHandle webview_get_window$handle() {
    return webview_get_window.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern void *webview_get_window(webview_t w)
   * }
   */
  public static MemorySegment webview_get_window$address() {
    return webview_get_window.ADDR;
  }

  /**
   * {@snippet lang = c : * extern void *webview_get_window(webview_t w)
   * }
   */
  public static MemorySegment webview_get_window(MemorySegment w) {
    var mh$ = webview_get_window.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_get_window", w);
      }
      return (MemorySegment) mh$.invokeExact(w);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_get_native_handle {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_POINTER, webview_h.C_POINTER, webview_h.C_INT);

    public static final MemorySegment      ADDR   =
        webview_h.findOrThrow("webview_get_native_handle");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c
   * : * extern void *webview_get_native_handle(webview_t w, webview_native_handle_kind_t kind)
   * }
   */
  public static FunctionDescriptor webview_get_native_handle$descriptor() {
    return webview_get_native_handle.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c
   * : * extern void *webview_get_native_handle(webview_t w, webview_native_handle_kind_t kind)
   * }
   */
  public static MethodHandle webview_get_native_handle$handle() {
    return webview_get_native_handle.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c
   * : * extern void *webview_get_native_handle(webview_t w, webview_native_handle_kind_t kind)
   * }
   */
  public static MemorySegment webview_get_native_handle$address() {
    return webview_get_native_handle.ADDR;
  }

  /**
   * {@snippet lang = c
   * : * extern void *webview_get_native_handle(webview_t w, webview_native_handle_kind_t kind)
   * }
   */
  public static MemorySegment webview_get_native_handle(MemorySegment w, int kind) {
    var mh$ = webview_get_native_handle.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_get_native_handle", w, kind);
      }
      return (MemorySegment) mh$.invokeExact(w, kind);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_set_title {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_set_title");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_set_title(webview_t w, const char *title)
   * }
   */
  public static FunctionDescriptor webview_set_title$descriptor() {
    return webview_set_title.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_set_title(webview_t w, const char *title)
   * }
   */
  public static MethodHandle webview_set_title$handle() {
    return webview_set_title.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_set_title(webview_t w, const char *title)
   * }
   */
  public static MemorySegment webview_set_title$address() {
    return webview_set_title.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_set_title(webview_t w, const char *title)
   * }
   */
  public static int webview_set_title(MemorySegment w, MemorySegment title) {
    var mh$ = webview_set_title.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_set_title", w, title);
      }
      return (int) mh$.invokeExact(w, title);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_set_size {
    public static final FunctionDescriptor DESC   = FunctionDescriptor.of(webview_h.C_INT,
        webview_h.C_POINTER, webview_h.C_INT, webview_h.C_INT, webview_h.C_INT);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_set_size");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_set_size(webview_t w, int width, int height, webview_hint_t hints)
   * }
   */
  public static FunctionDescriptor webview_set_size$descriptor() {
    return webview_set_size.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_set_size(webview_t w, int width, int height, webview_hint_t hints)
   * }
   */
  public static MethodHandle webview_set_size$handle() {
    return webview_set_size.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_set_size(webview_t w, int width, int height, webview_hint_t hints)
   * }
   */
  public static MemorySegment webview_set_size$address() {
    return webview_set_size.ADDR;
  }

  /**
   * {@snippet lang = c
   * : * extern webview_error_t webview_set_size(webview_t w, int width, int height, webview_hint_t hints)
   * }
   */
  public static int webview_set_size(MemorySegment w, int width, int height, int hints) {
    var mh$ = webview_set_size.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_set_size", w, width, height, hints);
      }
      return (int) mh$.invokeExact(w, width, height, hints);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_navigate {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_navigate");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_navigate(webview_t w, const char *url)
   * }
   */
  public static FunctionDescriptor webview_navigate$descriptor() {
    return webview_navigate.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_navigate(webview_t w, const char *url)
   * }
   */
  public static MethodHandle webview_navigate$handle() {
    return webview_navigate.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_navigate(webview_t w, const char *url)
   * }
   */
  public static MemorySegment webview_navigate$address() {
    return webview_navigate.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_navigate(webview_t w, const char *url)
   * }
   */
  public static int webview_navigate(MemorySegment w, MemorySegment url) {
    var mh$ = webview_navigate.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_navigate", w, url);
      }
      return (int) mh$.invokeExact(w, url);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_set_html {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_set_html");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_set_html(webview_t w, const char *html)
   * }
   */
  public static FunctionDescriptor webview_set_html$descriptor() {
    return webview_set_html.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_set_html(webview_t w, const char *html)
   * }
   */
  public static MethodHandle webview_set_html$handle() {
    return webview_set_html.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_set_html(webview_t w, const char *html)
   * }
   */
  public static MemorySegment webview_set_html$address() {
    return webview_set_html.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_set_html(webview_t w, const char *html)
   * }
   */
  public static int webview_set_html(MemorySegment w, MemorySegment html) {
    var mh$ = webview_set_html.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_set_html", w, html);
      }
      return (int) mh$.invokeExact(w, html);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_init {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_init");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_init(webview_t w, const char *js)
   * }
   */
  public static FunctionDescriptor webview_init$descriptor() {
    return webview_init.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_init(webview_t w, const char *js)
   * }
   */
  public static MethodHandle webview_init$handle() {
    return webview_init.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_init(webview_t w, const char *js)
   * }
   */
  public static MemorySegment webview_init$address() {
    return webview_init.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_init(webview_t w, const char *js)
   * }
   */
  public static int webview_init(MemorySegment w, MemorySegment js) {
    var mh$ = webview_init.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_init", w, js);
      }
      return (int) mh$.invokeExact(w, js);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_eval {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_eval");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_eval(webview_t w, const char *js)
   * }
   */
  public static FunctionDescriptor webview_eval$descriptor() {
    return webview_eval.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_eval(webview_t w, const char *js)
   * }
   */
  public static MethodHandle webview_eval$handle() {
    return webview_eval.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_eval(webview_t w, const char *js)
   * }
   */
  public static MemorySegment webview_eval$address() {
    return webview_eval.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_eval(webview_t w, const char *js)
   * }
   */
  public static int webview_eval(MemorySegment w, MemorySegment js) {
    var mh$ = webview_eval.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_eval", w, js);
      }
      return (int) mh$.invokeExact(w, js);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_bind {
    public static final FunctionDescriptor DESC   = FunctionDescriptor.of(webview_h.C_INT,
        webview_h.C_POINTER, webview_h.C_POINTER, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_bind");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_bind(webview_t w, const char *name, void (*fn)(const char *, const char *, void *), void *arg)
   * }
   */
  public static FunctionDescriptor webview_bind$descriptor() {
    return webview_bind.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_bind(webview_t w, const char *name, void (*fn)(const char *, const char *, void *), void *arg)
   * }
   */
  public static MethodHandle webview_bind$handle() {
    return webview_bind.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_bind(webview_t w, const char *name, void (*fn)(const char *, const char *, void *), void *arg)
   * }
   */
  public static MemorySegment webview_bind$address() {
    return webview_bind.ADDR;
  }

  /**
   * {@snippet lang = c
   * : * extern webview_error_t webview_bind(webview_t w, const char *name, void (*fn)(const char *, const char *, void *), void *arg)
   * }
   */
  public static int webview_bind(MemorySegment w, MemorySegment name, MemorySegment fn,
      MemorySegment arg) {
    var mh$ = webview_bind.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_bind", w, name, fn, arg);
      }
      return (int) mh$.invokeExact(w, name, fn, arg);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_unbind {
    public static final FunctionDescriptor DESC   =
        FunctionDescriptor.of(webview_h.C_INT, webview_h.C_POINTER, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_unbind");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern webview_error_t webview_unbind(webview_t w, const char *name)
   * }
   */
  public static FunctionDescriptor webview_unbind$descriptor() {
    return webview_unbind.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern webview_error_t webview_unbind(webview_t w, const char *name)
   * }
   */
  public static MethodHandle webview_unbind$handle() {
    return webview_unbind.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern webview_error_t webview_unbind(webview_t w, const char *name)
   * }
   */
  public static MemorySegment webview_unbind$address() {
    return webview_unbind.ADDR;
  }

  /**
   * {@snippet lang = c : * extern webview_error_t webview_unbind(webview_t w, const char *name)
   * }
   */
  public static int webview_unbind(MemorySegment w, MemorySegment name) {
    var mh$ = webview_unbind.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_unbind", w, name);
      }
      return (int) mh$.invokeExact(w, name);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_return {
    public static final FunctionDescriptor DESC   = FunctionDescriptor.of(webview_h.C_INT,
        webview_h.C_POINTER, webview_h.C_POINTER, webview_h.C_INT, webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_return");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_return(webview_t w, const char *id, int status, const char *result)
   * }
   */
  public static FunctionDescriptor webview_return$descriptor() {
    return webview_return.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_return(webview_t w, const char *id, int status, const char *result)
   * }
   */
  public static MethodHandle webview_return$handle() {
    return webview_return.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c
   * : * extern webview_error_t webview_return(webview_t w, const char *id, int status, const char *result)
   * }
   */
  public static MemorySegment webview_return$address() {
    return webview_return.ADDR;
  }

  /**
   * {@snippet lang = c
   * : * extern webview_error_t webview_return(webview_t w, const char *id, int status, const char *result)
   * }
   */
  public static int webview_return(MemorySegment w, MemorySegment id, int status,
      MemorySegment result) {
    var mh$ = webview_return.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_return", w, id, status, result);
      }
      return (int) mh$.invokeExact(w, id, status, result);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

  private static class webview_version {
    public static final FunctionDescriptor DESC   = FunctionDescriptor.of(webview_h.C_POINTER);

    public static final MemorySegment      ADDR   = webview_h.findOrThrow("webview_version");

    public static final MethodHandle       HANDLE =
        Linker.nativeLinker().downcallHandle(ADDR, DESC);
  }

  /**
   * Function descriptor for:
   * {@snippet lang = c : * extern const webview_version_info_t *webview_version()
   * }
   */
  public static FunctionDescriptor webview_version$descriptor() {
    return webview_version.DESC;
  }

  /**
   * Downcall method handle for:
   * {@snippet lang = c : * extern const webview_version_info_t *webview_version()
   * }
   */
  public static MethodHandle webview_version$handle() {
    return webview_version.HANDLE;
  }

  /**
   * Address for:
   * {@snippet lang = c : * extern const webview_version_info_t *webview_version()
   * }
   */
  public static MemorySegment webview_version$address() {
    return webview_version.ADDR;
  }

  /**
   * {@snippet lang = c : * extern const webview_version_info_t *webview_version()
   * }
   */
  public static MemorySegment webview_version() {
    var mh$ = webview_version.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
        traceDowncall("webview_version");
      }
      return (MemorySegment) mh$.invokeExact();
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }
}

